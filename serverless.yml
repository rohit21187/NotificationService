service: web-socket-poc
frameworkVersion: '3'

custom:
  tableName: 'users-table'

provider:
  name: aws
  runtime: nodejs18.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: ap-south-1
  versionFunctions: false
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - 'dynamodb:GetItem'
            - 'dynamodb:PutItem'
            - 'dynamodb:DeleteItem'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:Query'
            - 'dynamodb:Scan'
            - 'dynamodb:BatchGetItem'
            - 'dynamodb:BatchWriteItem'
            - 'dynamodb:DescribeTable'
            - 's3:*'
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
  environment:
    USERS_TABLE: ${self:custom.tableName}

functions:
  web-socket-poc:
    handler: lambda.socket
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default
      - websocket:
          route: sendToAll
      - httpApi:
          method: POST
          path: '/api/admin/send-notification'
  send-notification:
    handler: lambda.notification
    events:
      - httpApi:
          method: POST
          path: '/api/admin/direct/send-notification'

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: 'users-table'